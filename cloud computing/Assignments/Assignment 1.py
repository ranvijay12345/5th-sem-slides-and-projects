# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1redOPWS6AFwWoD1y0BVyXLks1G-ECgvM
"""

# 1
def stringBreakdown(str):
  """

    doctests:
    >>> stringBeakdown("glen")
    ['g', 'l', 'e', 'n']
    >>> stringBreakdown("abc")
    ['a', 'b', 'c']
    """

  res = list(str)
  return res

str = input("Enter a string: ")
print(stringBreakdown(str))

# 2
def convert(s):
  
    # initialization of string to ""
    new = ""
  
    # traverse in the string 
    for x in s:
        new += x 
  
    # return string 
    return new
      
      
# driver code   
s = ['s', 'h', 'i', 'v', 'e', 'n', 'd', 'r', 'a']
print(convert(s))

# 3
import random
n = int(input("How many random numbers? "))

randomlist = random.sample(range(1, n+1), n)
print(randomlist)

"""Returns a list of n random numbers where n being the int num.

    doctests:
    >>>How many random numbers? 8
       [7, 4, 6, 8, 5, 1, 3, 2]
    
    """

# 4
from typing import List
def sort_Decending(numList: List[int]) -> List[int]:
  """

    doctests:
    >>> sort_Decending([1, 2, 3, 4, 5])
    [5, 4, 3, 2, 1]

    >>> sort_Decending([3, 4, 1, 2, 5])
    [5, 4, 3, 2, 1]

    """
  new_NumList = sorted(numList, reverse=True)
  return new_NumList

# 5

random_list = ['1', '1', '2', '3', '2', '4', '4', '1', '2']
frequency = {}

# iterating over the list
for item in random_list:
   # checking the element in dictionary
   if item in frequency:
      # incrementing the counter
      frequency[item] += 1
   else:
      # initializing the count
      frequency[item] = 1

# printing the frequency
print(frequency)

# 6
def UniqueElement(numList: List[int]) -> set(): 
    """

    doctests:
    >>> UniqueElement([1, 1, 3, 2, 3, 3, 2, 3, 2])
    {1, 2, 3}
    >>> UniqueElement([1, 3, 4, 2, 3, 3, 2, 7, 6])
    {1, 2, 3, 4, 6, 7}
    """
    uniqueSet = set()
    for i in numList:
        if i not in uniqueSet:
            uniqueSet.add(i)

    return uniqueSet

# 7
def FirstRepeatingElement(numList: List[int]) -> set():  
    """

    doctests:
    >>> FirstRepeatingElement([1, 2, 3, 2, 5, 3, 1])
    {2}
    >>> FirstRepeatingElement([1, 3, 5, 4, 5, 1])
    {5}
    """
    min = 10000000
    repeatingSet = set([0])
    for i in range(len(numList)):
        for j in range(i + 1, len(numList)):
            if numList[i] == numList[j]:
                if j - i < min:
                    repeatingSet.pop()
                    min = j - i
                    repeatingSet.add(numList[i])

    return repeatingSet



# 8
def getSqAndCube(num: int) -> dict():  
    """
    doctests:
    >>> getSqAndCube(3)
    {0: [0, 0], 1: [1, 1], 2: [4, 8], 3: [9, 27]}
    >>> getSqAndCube(5)
    {0: [0, 0], 1: [1, 1], 2: [4, 8], 3: [9, 27], 4: [16, 64], 5: [25, 125]}
    """
    reqDict = {}
    for i in range(num + 1):
        key = i
        value = [i ** 2, i ** 3]
        reqDict.update({key: value})
    return reqDict

#9
def createTuple(list1: list(), list2: list()) -> tuple():  
    """
    >>> createTuple([1, 2, 3, 4], ['a', 'b', 'c', 'd'])
    ((1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'))
    >>> createTuple([2, 4, 8], [T, T, F])
    ((2, T), (4, T), (8, F))
    """
    tuple1 = tuple(list1)
    tuple2 = tuple(list2)
    reqTuple = zip(tuple1, tuple2)
    return tuple(reqTuple)

# 10
def generateSqList(num: int) -> List[int]: 
    """
    >>> generateSqList(5)
    [0, 1, 4, 9, 16, 25]
    >>> generateSqList(10)
    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    """
    newList = [x ** 2 for x in range(num + 1)]
    return newList

# 11
def generateSqDC(num: int) -> List[int]:  
    """
    >>> generateSqDC(5)
    {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
    >>> generateSqDC(10)
    {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}
    """
    newDict = {x: x ** 2 for x in range(num + 1)}
    return newDict

# 13
def uppercaseWords(wordList: List[str]) -> List[str]:  
    """
    >>> uppercaseWords(['aa', 'bb', 'cd', 'e'])
    ['AA', 'BB', 'CD', 'E']
    >>> uppercaseWords(['this', 'is', 'upper', 'case'])
    ['THIS', 'IS', 'UPPER', 'CASE']
    """
    newList = map(getUpper, wordList)
    return list(newList)

# 14
from functools import reduce
def productOfList(numList: List[int]) -> int: 
    """
    doctests:
    >>> productOfList([1, 2, 3, 4, 5])
    120
    >>> productOfList([10, 100, 1000, 10000, 100000])
    1000000000000000
    """
    result = reduce(mul, numList)
    return result